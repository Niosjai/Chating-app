name: Python Web App with ngrok

on:
  push:
    branches:
      - main  # Trigger workflow on push to main branch
  pull_request:  # Trigger workflow on pull requests

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code from the GitHub repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  # Use the appropriate Python version for your app

    # Step 3: Install Python dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Step 4: Run the Python web app on 0.0.0.0:5000
    - name: Run the web app
      run: |
        nohup python main.py &  # Start the app in the background and keep it running

    # Step 5: Install ngrok
    - name: Install ngrok
      run: |
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && \
        echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list && \
        sudo apt update && sudo apt install ngrok

    # Step 6: Start ngrok and expose port 5000 for a long-running session
    - name: Start ngrok and expose port 5000
      run: |
        ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}  # Use the ngrok auth token stored as a GitHub secret
        nohup ngrok http 5000 &  # Expose port 5000 and keep it running

    # Step 7: Get the public URL from ngrok and output it
    - name: Get public URL
      run: |
        sleep 5  # Allow ngrok to start
        curl --silent http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url'

    # Step 8: Keep the job running for a long time (several hours)
    - name: Keep the workflow alive
      run: |
        sleep 10800  # Keep the workflow running for 3 hours (10800 seconds)
